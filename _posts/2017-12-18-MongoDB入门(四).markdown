---
layout:     post
title:      "MongoDB入门(四)"
subtitle:   ""
date:       2017-12-18 12:00:00
author:     "Dugreen"
header-img: "img/artical-bgs/back9.jpg"
catalog: true
tags:
    - mangodb
    - 数据库
    - linux
---

## 超级管理员

为了更安全的访问mongodb，需要访问者提供用户名和密码，于是需要在mongodb中创建用户   <br/>
采用了角色-用户-数据库的安全管理方式   <br/>
常用系统角色如下：   <br/>

* root：只在admin数据库中可用，超级账号，超级权限
* Read：允许用户读取指定数据库
* readWrite：允许用户读写指定数据库

创建超级管理用户
```
use admin
db.createUser({
    user:'admin',
    pwd:'123',
    roles:[{role:'root',db:'admin'}]
})
```

## 启用安全认证

1.修改配置文件   <br/>
> $ sudo vi /etc/mongod.conf

2.启用身份验证   <br/>
注意：keys and values之间一定要加空格, 否则解析会报错

> security:
   authorization: enabled

3.重启服务   <br/>
> sudo service mongod stop
sudo service mongod start

4.终端连接   <br/>
$ mongo -u 'admin' -p '123' --authenticationDatabase 'admin'

## 普通用户管理

1.使用超级管理员登录，然后进入用户管理操作   <br/>
2.查看当前数据库的用户   <br/>
```
$ use test1
$ show users
```
3.创建普通用户
```
db.createUser({
    user:'t1',
    pwd:'123',
    roles:[{role:'readWrite',db:'test1'}]
})
```
4.终端连接   <br/>
mongo -u t1 -p 123 --authenticationDatabase test1
5.切换数据库，执行命令查看效果   <br/>
6.修改用户：可以修改pwd、roles属性   <br/>
$ db.updateUser('t1',{pwd:'456'})



## 复制（副本集）

#### 什么是复制

* 复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性，并可以保证数据的安全性
* 复制还允许从硬件故障和服务中断中恢复数据

#### 为什么要复制

* 数据备份
* 数据灾难恢复
* 读写分离
* 高（24* 7）数据可用性
* 无宕机维护
* 副本集对应用程序是透明

#### 复制的工作原理

* 复制至少需要两个节点A、B...
* A是主节点，负责处理客户端请求
* 其余的都是从节点，负责复制主节点上的数据
* 节点常见的搭配方式为：一主一从、一主多从
* 主节点记录在其上的所有操作，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致
* 主节点与从节点进行数据交互保障数据的一致性

#### 复制的特点

* N 个节点的集群
* 任何节点可作为主节点
* 所有写入操作都在主节点上
* 自动故障转移
* 自动恢复

#### 设置复制节点

接下来的操作需要打开多个终端窗口，而且可能会连接多台ubuntu主机，会显得有些乱，建议在xshell中实现

```
# step1:创建数据库目录t1、t2
# 在Desktop目录下演示，其它目录也可以，注意权限即可
$ mkdir t1
$ mkdir t2

# step2:使用如下格式启动mongod，注意replSet的名称是一致的
$ mongod --bind_ip 192.168.196.128 --port 27017 --dbpath ~/Desktop/t1 --replSet rs0
$ mongod --bind_ip 192.168.196.128 --port 27018 --dbpath ~/Desktop/t2 --replSet rs0

# step3:连接主服务器，此处设置192.168.196.128:27017为主服务器
$ mongo --host 192.168.196.128 --port 27017

# step4:初始化
$ rs.initiate()

# step5:查看当前状态
$ rs.status()

# step6:添加复本集
$ rs.add('192.168.196.128:27018')

# step7:连接第二个mongo服务
$ mongo --host 192.168.196.128 --port 27018

# step8:向主服务器中插入数据
$ use test1
$ for(i=0;i<10;i++){db.t1.insert({_id:i})}
$ db.t1.find()

# step10:在从服务器中插查询
# 说明：如果在从服务器上进行读操作，需要设置rs.slaveOk()
$ rs.slaveOk()
$ db.t1.find()

# 其它说明
# 删除从节点
$ rs.remove('192.168.196.128:27018')
# 关闭主服务器后，再重新启动，会发现原来的从服务器变为了从服务器，新启动的服务器（原来的从服务器）变为了从服务器
```

## 分片

> 在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求
当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量，这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据

#### 为什么使用分片

* 本地磁盘不够大
* 当请求量巨大时会出现内存不足。
* 垂直扩展价格昂贵(内存、磁盘、cpu)

#### 实现分片

实现分片需要3部分：

* 路由服务器mongos：客户端由此接入，根据分片依据，将数据写入到不同的数据服务器
* 配置服务器mongod：将数据进行分片的依据
* 数据服务器mongod：可以有多台物理机，用于存储实际的数据块

设计端口如下：

* 路由服务器：60001
* 配置服务器：60002
* 数据服务器1：60003
* 数据服务器2：60004
```
# step1:启动数据服务器，当前位于Desktop目录下
$ sudo mkdir t1
$ sudo mkdir t2
$ sudo mongod --port 60003 --dbpath=~/Desktop/t1
$ sudo mongod --port 60004 --dbpath=~/Desktop/t2

# step2:启动配置服务器
$ sudo mkdir conf
$ sudo mongod --port 60002 --dbpath=~/Desktop/conf

# step3:启动路由服务器
$ sudo mongos --port 60001 --configdb 192.168.196.128:60002

# step4:在路由服务器中添加数据服务器
$ mongo --port 60001
$ use admin
$ db.runCommand({addshard:'192.168.196.128:60003'})
$ db.runCommand({addshard:'192.168.196.128:60004'})

# step5:对数据库test1启用分片
$ db.runCommand({enablesharding:'test1'})

# step6:指定片键，即集合中文档的分片依据
$ db.runCommand({shardcollection:'test1.t1',key:{name:1}})

# step7:测试数据，向集合中插入1W条数据
$ for(i=0;i<10000;i++){
    db.t1.insert({name:'abc'+i})
}

# step8:查看数据存储情况
$ db.printShardingStatus()
# 可以查看到数据均匀存储在了数据服务器上

# step9:查询数据
$ db.t1.find({name:'abc1000'})
$ db.t1.find({name:'abc9000'})
# 分片的使用，对于客户端是透明的，对数据的读写没有变化
```
