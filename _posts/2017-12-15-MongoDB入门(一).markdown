---
layout:     post
title:      "MongoDB入门(一)"
subtitle:   ""
date:       2017-12-15 12:00:00
author:     "Dugreen"
header-img: "img/artical-bgs/back6.jpg"
catalog: true
tags:
    - mangodb
    - 数据库
    - linux
---

## 基本操作

- MongoDB将数据存储为一个文档，数据结构由键值(key=>value)对组成
- MongoDB文档类似于JSON对象，字段值可以包含其他文档、数组、文档数组
- 安装管理mongodb环境
- 完成数据库、集合的管理
- 数据的增加、修改、删除、查询


-----------

### MongoDB安装

###### 下载mongodb的版本，两点注意

1. 根据业界规则，偶数为稳定版，如1.6.X，奇数为开发版，如1.7.X
2. 32bit的mongodb最大只能存放2G的数据，64bit就没有限制

###### 到官网，选择合适的版本下载

![mongodb_logo](https://webassets.mongodb.com/_com_assets/global/mongodb-logo-white.png)
[官网链接](https://www.mongodb.com/)

###### 解压配置

  tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.4.0.tgz
  移动到/usr/local/目录下
  sudo mv -r mongodb-linux-x86_64-ubuntu1604-3.4.0/ /usr/local/mongodb
  将可执行文件添加到PATH路径中
  export PATH=/usr/local/mongodb/bin:$PATH

----------------

### 数据库基本操作

查看当前数据库名称

  $ db

查看所有数据库名称,列出所有在物理上存在的数据库

  $ show dbs

切换数据库,如果数据库不存在，则指向数据库，但不创建，直到插入数据或创建集合时数据库才被创建

  $ use 数据库名称

默认的数据库为test，如果你没有创建新的数据库，集合将存放在test数据库中
数据库删除,删除当前指向的数据库,如果数据库不存在，则什么也不做

  db.dropDatabase()

----------

### 集合操作

集合创建

  $ db.createCollection(name, options)
  # name是要创建的集合的名称
  # options是一个文档，用于指定集合的配置
  # 选项​​参数是可选的，所以只需要到指定的集合名称。
  # 例1：不限制集合大小
  # db.createCollection("stu")
  # 例2：限制集合大小
  # 参数capped：默认值为false表示不设置上限，值为true表示设置上限
  # 参数size：当capped值为true时，需要指定此参数，表示上限大小，当文档达到上限时，会将之前的数据覆盖，单位为字节
  # db.createCollection("sub", { capped : true, size : 10 } )

查看当前数据库的集合

  $ show collections

删除

  $ db.集合名称.drop()

---------------

### 数据类型

***下表为MongoDB中常用的几种数据类型：***

* Object ID：文档ID
* String：字符串，最常用，必须是有效的UTF-8
* Boolean：存储一个布尔值，true或false
* Integer：整数可以是32位或64位，这取决于服务器
* Double：存储浮点值
* Arrays：数组或列表，多个值存储到一个键
* Object：用于嵌入式的文档，即一个值为一个文档
* Null：存储Null值
* Timestamp：时间戳
* Date：存储当前日期或时间的UNIX时间格式

***object id***

1. 每个文档都有一个属性，为_id，保证每个文档的唯一性
2. 可以自己去设置_id插入文档
3. 如果没有提供，那么MongoDB为每个文档提供了一个独特的_id，类型为objectID
4. objectID是一个12字节的十六进制数,前4个字节为当前时间戳,接下来3个字节的机器ID,接下来的2个字节中MongoDB的服务进程id,最后3个字节是简单的增量值.

----------

### 数据操作

###### 插入

  **$ db.集合名称.insert(document)**
  # 插入文档时，如果不指定_id参数，MongoDB会为文档分配一个唯一的ObjectId
  # 例1
  **$ db.stu.insert({name:'gj',gender:1})**
  # 例2
  **$ s1={_id:'20160101',name:'hr'}
  $ s1.gender=0
  $ db.stu.insert(s1)**

######简单查询

  **$ db.集合名称.find()**

###### 更新

  **$ db.集合名称.update(
     <query>,
     <update>,
     {multi: <boolean>}
  )**
  # 参数query:查询条件，类似sql语句update中where部分
  # 参数update:更新操作符，类似sql语句update中set部分
  # 参数multi:可选，默认是false，表示只更新找到的第一条记录，值为true表示把满足条件的文档全部更新
  # 例3：全文档更新
  **$ db.stu.update({name:'hr'},{name:'mnc'})**
  # 例4：指定属性更新，通过操作符$set
  **$ db.stu.insert({name:'hr',gender:0})
  $ db.stu.update({name:'hr'},{$set:{name:'hys'}})**
  # 例5：修改多条匹配到的数据
  **$ db.stu.update({},{$set:{gender:0}},{multi:true})**

######保存

  **$ db.集合名称.save(document)**
  # 如果文档的_id已经存在则修改，如果文档的_id不存在则添加

  # 例6
  **$ db.stu.save({_id:'20160102','name':'yk',gender:1})**
  # 例7
  **$ db.stu.save({_id:'20160102','name':'wyk'})**

###### 删除

  **$ db.集合名称.remove(
     <query>,
     {
       justOne: <boolean>
     }
  )**
  # 参数query:可选，删除的文档的条件
  # 参数justOne:可选，如果设为true或1，则只删除一条，默认false，表示删除多条
  # 例8：只删除匹配到的第一条
  **$ db.stu.remove({gender:0},{justOne:true})**
  # 例9：全部删除
  **$ db.stu.remove({})**

###### 关于size的示例
  # 例10
  # 创建集合
  **$ db.createCollection('sub',{capped:true,size:10})**
  # 插入第一条数据库查询
  **$ db.sub.insert({title:'linux',count:10})
  $ db.sub.find()**
  # 插入第二条数据库查询
  **$ db.sub.insert({title:'web',count:15})
  db.sub.find()**
  # 插入第三条数据库查询
  **$ db.sub.insert({title:'sql',count:8})
  $ db.sub.find()**
  # 插入第四条数据库查询
  **$ db.sub.insert({title:'django',count:12})
  $ db.sub.find()**
  # 插入第五条数据库查询
  **$ db.sub.insert({title:'python',count:14})
  $ db.sub.find()**
