---
layout:     post
title:      "MongoDB入门(三)"
subtitle:   ""
date:       2017-12-17 12:00:00
author:     "Dugreen"
header-img: "img/artical-bgs/back8.jpg"
catalog: true
tags:
    - mangodb
    - 数据库
    - linux
---

# 高级操作

>讲解关于mongodb的高级操作，包括聚合、主从复制、分片、备份与恢复、MR完成python与mongodb的交互

## 聚合 aggregate

>聚合(aggregate)主要用于计算数据，类似sql中的sum()、avg()

语法<br/>
db.集合名称.aggregate([{管道:{表达式}}])<br/>

#### 管道

管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的输入<br/>
**$ ps ajx | grep mongo**<br/>
在mongodb中，管道具有同样的作用，文档处理完毕后，通过管道进行下一次处理

常用管道

* $group：将集合中的文档分组，可用于统计结果
* $match：过滤数据，只输出符合条件的文档
* $project：修改输入文档的结构，如重命名、增加、删除字段、创建计算结果
* $sort：将输入文档排序后输出
* $limit：限制聚合管道返回的文档数
* $skip：跳过指定数量的文档，并返回余下的文档
* $unwind：将数组类型的字段进行拆分

#### 表达式

处理输入文档并输出  <br/>
语法  <br>
***表达式:'$列名'***  <br/>

常用表达式

* $sum：计算总和，$sum:1同count表示计数
* $avg：计算平均值
* $min：获取最小值
* $max：获取最大值
* $push：在结果文档中插入值到一个数组中
* $first：根据资源文档的排序获取第一个文档数据
* $last：根据资源文档的排序获取最后一个文档数据

-------------------


## $group

将集合中的文档分组，可用于统计结果  <br/>
id表示分组的依据，使用某个字段的格式为"$字段"

```
#例1：统计男生、女生的总人数
db.stu.aggregate([
    {$group:
        {
            _id:'$gender',
            counter:{$sum:1}
        }
    }
])
```

###### Group by null

将集合中所有文档分为一组

```
例2：求学生总人数、平均年龄
db.stu.aggregate([
    {$group:
        {
            _id:null,
            counter:{$sum:1},
            avgAge:{$avg:'$age'}
        }
    }
])
```

###### 透视数据

```
例3：统计学生性别及学生姓名
db.stu.aggregate([
    {$group:
        {
            _id:'$gender',
            name:{$push:'$name'}
        }
    }
])

# 使用$$ROOT可以将文档内容加入到结果集的数组中，代码如下
db.stu.aggregate([
    {$group:
        {
            _id:'$gender',
            name:{$push:'$$ROOT'}
        }
    }
])
```

## $match

用于过滤数据，只输出符合条件的文档<br/>
使用MongoDB的标准查询操作

```
# 例1：查询年龄大于20的学生
db.stu.aggregate([
    {$match:{age:{$gt:20}}}
])
# 例2：查询年龄大于20的男生、女生人数
db.stu.aggregate([
    {$match:{age:{$gt:20}}},
    {$group:{_id:'$gender',counter:{$sum:1}}}
])
```

## $project

修改输入文档的结构，如重命名、增加、删除字段、创建计算结果

```
# 例1：查询学生的姓名、年龄
db.stu.aggregate([
    {$project:{_id:0,name:1,age:1}}
])
# 例2：查询男生、女生人数，输出人数
db.stu.aggregate([
    {$group:{_id:'$gender',counter:{$sum:1}}},
    {$project:{_id:0,counter:1}}
])
```
## $sort

将输入文档排序后输出

```
# 例1：查询学生信息，按年龄升序
b.stu.aggregate([{$sort:{age:1}}])
# 例2：查询男生、女生人数，按人数降序
db.stu.aggregate([
    {$group:{_id:'$gender',counter:{$sum:1}}},
    {$sort:{counter:-1}}
])
```
## $limit

限制聚合管道返回的文档数

```
# 例1：查询2条学生信息
db.stu.aggregate([{$limit:2}])
```

## $skip

跳过指定数量的文档，并返回余下的文档

```
# 例2：查询从第3条开始的学生信息
db.stu.aggregate([{$skip:2}])
# 例3：统计男生、女生人数，按人数升序，取第二条数据
db.stu.aggregate([
    {$group:{_id:'$gender',counter:{$sum:1}}},
    {$sort:{counter:1}},
    {$skip:1},
    {$limit:1}
])
# 注意顺序：先写skip，再写limit
```
## $unwind

> 将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值

#### 语法1

* 对某字段值进行拆分  <br/>
db.集合名称.aggregate([{$unwind:'$字段名称'}])
* 构造数据  <br/>
db.t2.insert({_id:1,item:'t-shirt',size:['S','M','L']})
* 查询  <br/>
db.t2.aggregate([{$unwind:'$size'}])

#### 语法2

* 对某字段值进行拆分
* 处理空数组、非数组、无字段、null情况
```
db.inventory.aggregate([{
    $unwind:{
        path:'$字段名称',
        preserveNullAndEmptyArrays:<boolean>#防止数据丢失
    }
}])
```

* 构造数据
```
db.t3.insert([
{ "_id" : 1, "item" : "a", "size": [ "S", "M", "L"] },
{ "_id" : 2, "item" : "b", "size" : [ ] },
{ "_id" : 3, "item" : "c", "size": "M" },
{ "_id" : 4, "item" : "d" },
{ "_id" : 5, "item" : "e", "size" : null }
])
```

* 使用语法1查询<br/>
db.t3.aggregate([{$unwind:'$size'}])
* 查看查询结果，发现对于空数组、无字段、null的文档，都被丢弃了
* 问：如何能不丢弃呢？
* 答：使用语法2查询  <br/>
db.t3.aggregate([{$unwind:{path:'$sizes',preserveNullAndEmptyArrays:true}}])
